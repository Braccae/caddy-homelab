name: Build and Release Custom Caddy

on:
  workflow_dispatch:
  repository_dispatch:
    types: [caddy_release, module_release]
  schedule:
    - cron: '0 0 * * *'  # Run daily to check for new releases

jobs:
  check_releases:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
      caddy_version: ${{ steps.check.outputs.caddy_version }}
      modules_versions: ${{ steps.check.outputs.modules_versions }}
    steps:
      - uses: actions/checkout@v3
      - name: Check for new releases
        id: check
        run: |
          # Check Caddy releases
          LATEST_CADDY=$(curl -s https://api.github.com/repos/caddyserver/caddy/releases/latest | jq -r .tag_name)
          CURRENT_CADDY=$(cat .caddy_version || echo "v0.0.0")
          
          # Check module releases
          MODULES_CHANGED=false
          MODULES_VERSIONS="{}"
          while IFS= read -r module; do
            repo=$(echo $module | cut -d '/' -f 2-3)
            LATEST_MODULE=$(curl -s https://api.github.com/repos/$repo/releases/latest | jq -r .tag_name)
            CURRENT_MODULE=$(cat .${repo//\//_}_version || echo "v0.0.0")
            if [ "$LATEST_MODULE" != "$CURRENT_MODULE" ]; then
              MODULES_CHANGED=true
              echo $LATEST_MODULE > .${repo//\//_}_version
              MODULES_VERSIONS=$(echo $MODULES_VERSIONS | jq --arg repo "$repo" --arg version "$LATEST_MODULE" '. + {($repo): $version}')
            fi
          done < modules.txt
          
          if [ "$LATEST_CADDY" != "$CURRENT_CADDY" ] || [ "$MODULES_CHANGED" = true ]; then
            echo $LATEST_CADDY > .caddy_version
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "caddy_version=$LATEST_CADDY" >> $GITHUB_OUTPUT
            echo "modules_versions=$MODULES_VERSIONS" >> $GITHUB_OUTPUT
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi

  build_and_release:
    needs: check_releases
    if: needs.check_releases.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      - name: Install xcaddy
        run: go install github.com/caddyserver/xcaddy/cmd/xcaddy@latest

      - name: Build Caddy
        run: |
          MODULES=$(cat modules.txt | xargs -I {} echo --with {})
          GOARCH=${{ matrix.arch }} xcaddy build $MODULES
          mv caddy caddy-linux-${{ matrix.arch }}

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: caddy-linux-${{ matrix.arch }}
          path: caddy-linux-${{ matrix.arch }}

  create_release:
    needs: [check_releases, build_and_release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3

      - name: Prepare Release Notes
        id: release_notes
        run: |
          echo "MAIN:" > release_notes.md
          echo "" >> release_notes.md
          echo "caddy update to ${{ needs.check_releases.outputs.caddy_version }}" >> release_notes.md
          echo "modules update to various versions" >> release_notes.md
          echo "" >> release_notes.md
          echo "CADDY:" >> release_notes.md
          echo "" >> release_notes.md
          curl -s https://api.github.com/repos/caddyserver/caddy/releases/latest | jq -r .body >> release_notes.md
          echo "" >> release_notes.md
          echo "MODULES:" >> release_notes.md
          echo "" >> release_notes.md
          echo '${{ needs.check_releases.outputs.modules_versions }}' | jq -r 'to_entries[] | "\(.key)\n  \(.value)"' | while read -r module; read -r version; do
            echo "$module" >> release_notes.md
            curl -s "https://api.github.com/repos/$module/releases/tags/$version" | jq -r .body | sed 's/^/  /' >> release_notes.md
            echo "" >> release_notes.md
          done

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.check_releases.outputs.caddy_version }}
          release_name: Release ${{ needs.check_releases.outputs.caddy_version }}
          body_path: release_notes.md
          draft: false
          prerelease: false

      - name: Upload Release Asset (amd64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./caddy-linux-amd64/caddy-linux-amd64
          asset_name: caddy-linux-amd64
          asset_content_type: application/octet-stream

      - name: Upload Release Asset (arm64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./caddy-linux-arm64/caddy-linux-arm64
          asset_name: caddy-linux-arm64
          asset_content_type: application/octet-stream